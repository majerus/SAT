#"CR + Math" = "MV",
#"CR + Math + Writing" = "MVW",
"Number of Test Takers" = "Number.of.Test.Takers"
))),
column(10, htmlOutput("chart"))),
#tabPanel("Data",
fluidRow(
column(7, offset=4,  br(), DT::dataTableOutput('tbl')))
#)
))
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
titlePanel("NYC SAT Analysis"),
#tabsetPanel(type = "tabs",
#tabPanel("Graph",
fluidRow(
column(2, includeHTML('help.html'),
br(),
selectInput("var", "Select Variable:",
c("Critical Reading" = "Critical.Reading.Mean",
"Mathematics" = "Mathematics.Mean",
"Writing" = "Writing.Mean",
#"CR + Math" = "MV",
#"CR + Math + Writing" = "MVW",
"Number of Test Takers" = "Number.of.Test.Takers"
))),
column(10, htmlOutput("chart"))),
#tabPanel("Data",
fluidRow(
column(5, offset=4,  br(), DT::dataTableOutput('tbl')))
#)
))
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
titlePanel("NYC SAT Analysis"),
#tabsetPanel(type = "tabs",
#tabPanel("Graph",
fluidRow(
column(2, includeHTML('help.html'),
br(),
selectInput("var", "Select Variable:",
c("Critical Reading" = "Critical.Reading.Mean",
"Mathematics" = "Mathematics.Mean",
"Writing" = "Writing.Mean",
#"CR + Math" = "MV",
#"CR + Math + Writing" = "MVW",
"Number of Test Takers" = "Number.of.Test.Takers"
))),
column(10, htmlOutput("chart"))),
#tabPanel("Data",
fluidRow(
column(6, offset=4,  br(), DT::dataTableOutput('tbl')))
#)
))
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
titlePanel("NYC SAT Analysis"),
#tabsetPanel(type = "tabs",
#tabPanel("Graph",
fluidRow(
column(2, includeHTML('help.html'),
br(),
selectInput("var", "Select Variable:",
c("Critical Reading" = "Critical.Reading.Mean",
"Mathematics" = "Mathematics.Mean",
"Writing" = "Writing.Mean",
#"CR + Math" = "MV",
#"CR + Math + Writing" = "MVW",
"Number of Test Takers" = "Number.of.Test.Takers"
))),
column(10, htmlOutput("chart"))),
#tabPanel("Data",
fluidRow(
column(6, offset=3,  br(), DT::dataTableOutput('tbl')))
#)
))
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
titlePanel("NYC SAT Analysis"),
#tabsetPanel(type = "tabs",
#tabPanel("Graph",
fluidRow(
column(2, includeHTML('help.html'),
br(),
selectInput("var", "Select Variable:",
c("Critical Reading" = "Critical.Reading.Mean",
"Mathematics" = "Mathematics.Mean",
"Writing" = "Writing.Mean",
#"CR + Math" = "MV",
#"CR + Math + Writing" = "MVW",
"Number of Test Takers" = "Number.of.Test.Takers"
))),
column(10, htmlOutput("chart"))),
#tabPanel("Data",
fluidRow(
column(7, offset=3,  br(), DT::dataTableOutput('tbl')))
#)
))
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Colby donation analysis -------------------------------------------------
#   output$variable = renderUI({
#     selectInput("selected.var", strong('Select Variable'), colnames(data))
#   })
#
# subset data
graph.data <- reactive({
sorted_stats <- eval(substitute(data %>%
select(School.Name, col) %>%
arrange(desc(col)),
list(col=as.symbol(input$var))))
sorted_stats <- sorted_stats[complete.cases(sorted_stats),]
})
# data table
output$tbl = DT::renderDataTable({
#DT::datatable(data)
DT::datatable(table)
#     output$result <- renderDataTable({
#       z <- as(dataInput(), "data.frame")
#       setnames(z, c("Rules", "Support", "Confidence", "StatDep"))
#       z
#     }, options = list(aLengthMenu = c(5, 30, 50), iDisplayLength = 5, bSortClasses = TRUE,
#                       bAutoWidth = FALSE,
#                       aoColumn = list(list(sWidth = "150px", sWidth = "30px",
#                                            sWidth = "30px", sWidth = "30px"))
#     ))
}, options = list(aoColumn = list(list(sWidth = "150px", sWidth = "30px",
sWidth = "30px", sWidth = "30px")) ))
# graph
output$chart <- renderGvis({
gvisColumnChart(graph.data(),
options=list(legend='none',
hAxes="[{title:'High School',
textPosition: 'out',
textPosition: 'none'
}]",
vAxes="[{minValue: 0
}]",
width=1500, height=500
#hAxes="[{showTextEvery: 0}]"
)) #,
#vAxes="[{title:'val1'}, {title:'val2'}]"))
})
}
ui <- shinyUI(fluidPage(
titlePanel("NYC SAT Analysis"),
#tabsetPanel(type = "tabs",
#tabPanel("Graph",
fluidRow(
column(2, includeHTML('help.html'),
br(),
selectInput("var", "Select Variable:",
c("Critical Reading" = "Critical.Reading.Mean",
"Mathematics" = "Mathematics.Mean",
"Writing" = "Writing.Mean",
#"CR + Math" = "MV",
#"CR + Math + Writing" = "MVW",
"Number of Test Takers" = "Number.of.Test.Takers"
))),
column(10, htmlOutput("chart"))),
#tabPanel("Data",
fluidRow(
column(7, offset=3,  br(), DT::dataTableOutput('tbl')))
#)
))
shinyApp(ui = ui, server = server)
table
View(table)
server <- function(input, output) {
# Colby donation analysis -------------------------------------------------
#   output$variable = renderUI({
#     selectInput("selected.var", strong('Select Variable'), colnames(data))
#   })
#
# subset data
graph.data <- reactive({
sorted_stats <- eval(substitute(data %>%
select(School.Name, col) %>%
arrange(desc(col)),
list(col=as.symbol(input$var))))
sorted_stats <- sorted_stats[complete.cases(sorted_stats),]
})
# data table
output$tbl = DT::renderDataTable({
#DT::datatable(data)
DT::datatable(table)
#     output$result <- renderDataTable({
#       z <- as(dataInput(), "data.frame")
#       setnames(z, c("Rules", "Support", "Confidence", "StatDep"))
#       z
#     }, options = list(aLengthMenu = c(5, 30, 50), iDisplayLength = 5, bSortClasses = TRUE,
#                       bAutoWidth = FALSE,
#                       aoColumn = list(list(sWidth = "150px", sWidth = "30px",
#                                            sWidth = "30px", sWidth = "30px"))
#     ))
}, options = list(aoColumnDefs = list(list(sWidth=c("100px"),
aTargets=c(list(0),list(1),list(2),list(3),list(4),list(5))))))
# graph
output$chart <- renderGvis({
gvisColumnChart(graph.data(),
options=list(legend='none',
hAxes="[{title:'High School',
textPosition: 'out',
textPosition: 'none'
}]",
vAxes="[{minValue: 0
}]",
width=1500, height=500
#hAxes="[{showTextEvery: 0}]"
)) #,
#vAxes="[{title:'val1'}, {title:'val2'}]"))
})
}
ui <- shinyUI(fluidPage(
titlePanel("NYC SAT Analysis"),
#tabsetPanel(type = "tabs",
#tabPanel("Graph",
fluidRow(
column(2, includeHTML('help.html'),
br(),
selectInput("var", "Select Variable:",
c("Critical Reading" = "Critical.Reading.Mean",
"Mathematics" = "Mathematics.Mean",
"Writing" = "Writing.Mean",
#"CR + Math" = "MV",
#"CR + Math + Writing" = "MVW",
"Number of Test Takers" = "Number.of.Test.Takers"
))),
column(10, htmlOutput("chart"))),
#tabPanel("Data",
fluidRow(
column(7, offset=3,  br(), DT::dataTableOutput('tbl')))
#)
))
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Colby donation analysis -------------------------------------------------
#   output$variable = renderUI({
#     selectInput("selected.var", strong('Select Variable'), colnames(data))
#   })
#
# subset data
graph.data <- reactive({
sorted_stats <- eval(substitute(data %>%
select(School.Name, col) %>%
arrange(desc(col)),
list(col=as.symbol(input$var))))
sorted_stats <- sorted_stats[complete.cases(sorted_stats),]
})
# data table
output$tbl = DT::renderDataTable({
#DT::datatable(data)
DT::datatable(table)
#     output$result <- renderDataTable({
#       z <- as(dataInput(), "data.frame")
#       setnames(z, c("Rules", "Support", "Confidence", "StatDep"))
#       z
#     }, options = list(aLengthMenu = c(5, 30, 50), iDisplayLength = 5, bSortClasses = TRUE,
#                       bAutoWidth = FALSE,
#                       aoColumn = list(list(sWidth = "150px", sWidth = "30px",
#                                            sWidth = "30px", sWidth = "30px"))
#     ))
}, option=list(iDisplayLength=15,bSortClasses = TRUE,bAutoWidth=FALSE,
aoColumnDefs = list(list(sWidth=c("100px"),
aTargets=c(list(0),list(1),list(2),list(3),list(4),list(5))))))
# graph
output$chart <- renderGvis({
gvisColumnChart(graph.data(),
options=list(legend='none',
hAxes="[{title:'High School',
textPosition: 'out',
textPosition: 'none'
}]",
vAxes="[{minValue: 0
}]",
width=1500, height=500
#hAxes="[{showTextEvery: 0}]"
)) #,
#vAxes="[{title:'val1'}, {title:'val2'}]"))
})
}
ui <- shinyUI(fluidPage(
titlePanel("NYC SAT Analysis"),
#tabsetPanel(type = "tabs",
#tabPanel("Graph",
fluidRow(
column(2, includeHTML('help.html'),
br(),
selectInput("var", "Select Variable:",
c("Critical Reading" = "Critical.Reading.Mean",
"Mathematics" = "Mathematics.Mean",
"Writing" = "Writing.Mean",
#"CR + Math" = "MV",
#"CR + Math + Writing" = "MVW",
"Number of Test Takers" = "Number.of.Test.Takers"
))),
column(10, htmlOutput("chart"))),
#tabPanel("Data",
fluidRow(
column(7, offset=3,  br(), DT::dataTableOutput('tbl')))
#)
))
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Colby donation analysis -------------------------------------------------
#   output$variable = renderUI({
#     selectInput("selected.var", strong('Select Variable'), colnames(data))
#   })
#
# subset data
graph.data <- reactive({
sorted_stats <- eval(substitute(data %>%
select(School.Name, col) %>%
arrange(desc(col)),
list(col=as.symbol(input$var))))
sorted_stats <- sorted_stats[complete.cases(sorted_stats),]
})
# data table
output$tbl = DT::renderDataTable({
#DT::datatable(data)
DT::datatable(table)
#     output$result <- renderDataTable({
#       z <- as(dataInput(), "data.frame")
#       setnames(z, c("Rules", "Support", "Confidence", "StatDep"))
#       z
#     }, options = list(aLengthMenu = c(5, 30, 50), iDisplayLength = 5, bSortClasses = TRUE,
#                       bAutoWidth = FALSE,
#                       aoColumn = list(list(sWidth = "150px", sWidth = "30px",
#                                            sWidth = "30px", sWidth = "30px"))
#     ))
}, option=list(iDisplayLength=15,bSortClasses = TRUE,bAutoWidth=FALSE,
aoColumnDefs = list(list(sWidth=c("100px"),
aTargets=list(0)))))
# graph
output$chart <- renderGvis({
gvisColumnChart(graph.data(),
options=list(legend='none',
hAxes="[{title:'High School',
textPosition: 'out',
textPosition: 'none'
}]",
vAxes="[{minValue: 0
}]",
width=1500, height=500
#hAxes="[{showTextEvery: 0}]"
)) #,
#vAxes="[{title:'val1'}, {title:'val2'}]"))
})
}
ui <- shinyUI(fluidPage(
titlePanel("NYC SAT Analysis"),
#tabsetPanel(type = "tabs",
#tabPanel("Graph",
fluidRow(
column(2, includeHTML('help.html'),
br(),
selectInput("var", "Select Variable:",
c("Critical Reading" = "Critical.Reading.Mean",
"Mathematics" = "Mathematics.Mean",
"Writing" = "Writing.Mean",
#"CR + Math" = "MV",
#"CR + Math + Writing" = "MVW",
"Number of Test Takers" = "Number.of.Test.Takers"
))),
column(10, htmlOutput("chart"))),
#tabPanel("Data",
fluidRow(
column(7, offset=3,  br(), DT::dataTableOutput('tbl')))
#)
))
shinyApp(ui = ui, server = server)
# install and load packages -----------------------------------------------
pkg <- c("googleVis", "shiny", "dplyr")
new.pkg <- pkg[!(pkg %in% installed.packages())]
if (length(new.pkg)) {
install.packages(new.pkg)
}
library(googleVis)
if (!require("DT")) devtools::install_github("rstudio/DT")
library(DT)
library(shiny)
library(dplyr)
# read in data that is saved across multiple excel worksheets -------------
# load excel workbook
#setwd('/Users/majerus/Desktop/R/shiny/SAT')
data <- read.csv("SAT__College_Board__2010_School_Level_Results.csv")
data[data=='s'] <- NA
data$Number.of.Test.Takers <- as.numeric(as.character(data$Number.of.Test.Takers))
data$Critical.Reading.Mean <- as.numeric(as.character(data$Critical.Reading.Mean))
data$Mathematics.Mean	<- as.numeric(as.character(data$Mathematics.Mean))
data$Writing.Mean <- as.numeric(as.character(data$Writing.Mean))
#data$MV <- data$Critical.Reading.Mean + data$Mathematics.Mean
#data$MVW <- data$Critical.Reading.Mean + data$Mathematics.Mean + data$Writing.Mean
data$School.Name <- tolower(data$School.Name)
data$School.Name <- gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", data$School.Name, perl=TRUE)
table <- data
colnames(table) <- c('dbn', 'School Name', 'Number of Test Takers', 'Critical Reading Mean', 'Mathematics Mean', 'Writing Mean')
table$dbn <- NULL
# Shiny Application -------------------------------------------------------
server <- function(input, output) {
# Colby donation analysis -------------------------------------------------
#   output$variable = renderUI({
#     selectInput("selected.var", strong('Select Variable'), colnames(data))
#   })
#
# subset data
graph.data <- reactive({
sorted_stats <- eval(substitute(data %>%
select(School.Name, col) %>%
arrange(desc(col)),
list(col=as.symbol(input$var))))
sorted_stats <- sorted_stats[complete.cases(sorted_stats),]
})
# data table
output$tbl = DT::renderDataTable({
#DT::datatable(data)
DT::datatable(table)
#     output$result <- renderDataTable({
#       z <- as(dataInput(), "data.frame")
#       setnames(z, c("Rules", "Support", "Confidence", "StatDep"))
#       z
#     }, options = list(aLengthMenu = c(5, 30, 50), iDisplayLength = 5, bSortClasses = TRUE,
#                       bAutoWidth = FALSE,
#                       aoColumn = list(list(sWidth = "150px", sWidth = "30px",
#                                            sWidth = "30px", sWidth = "30px"))
#     ))
}   #, option=list(iDisplayLength=15,bSortClasses = TRUE,bAutoWidth=FALSE,
#           aoColumnDefs = list(list(sWidth=c("100px"),
#                                    aTargets=list(0))))
)
# graph
output$chart <- renderGvis({
gvisColumnChart(graph.data(),
options=list(legend='none',
hAxes="[{title:'High School',
textPosition: 'out',
textPosition: 'none'
}]",
vAxes="[{minValue: 0
}]",
width=1500, height=500
#hAxes="[{showTextEvery: 0}]"
)) #,
#vAxes="[{title:'val1'}, {title:'val2'}]"))
})
}
ui <- shinyUI(fluidPage(
titlePanel("NYC SAT Analysis"),
#tabsetPanel(type = "tabs",
#tabPanel("Graph",
fluidRow(
column(2, includeHTML('help.html'),
br(),
selectInput("var", "Select Variable:",
c("Critical Reading" = "Critical.Reading.Mean",
"Mathematics" = "Mathematics.Mean",
"Writing" = "Writing.Mean",
#"CR + Math" = "MV",
#"CR + Math + Writing" = "MVW",
"Number of Test Takers" = "Number.of.Test.Takers"
))),
column(10, htmlOutput("chart"))),
#tabPanel("Data",
fluidRow(
column(7, offset=3,  br(), DT::dataTableOutput('tbl')))
#)
))
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
titlePanel("NYC SAT Analysis"),
#tabsetPanel(type = "tabs",
#tabPanel("Graph",
fluidRow(
column(2, includeHTML('help.html'),
br(),
selectInput("var", "Select Variable:",
c("Critical Reading" = "Critical.Reading.Mean",
"Mathematics" = "Mathematics.Mean",
"Writing" = "Writing.Mean",
#"CR + Math" = "MV",
#"CR + Math + Writing" = "MVW",
"Number of Test Takers" = "Number.of.Test.Takers"
))),
column(10, htmlOutput("chart"))),
#tabPanel("Data",
fluidRow(
column(8, offset=3,  br(), DT::dataTableOutput('tbl')))
#)
))
shinyApp(ui = ui, server = server)
ui <- shinyUI(fluidPage(
titlePanel("NYC SAT Analysis"),
#tabsetPanel(type = "tabs",
#tabPanel("Graph",
fluidRow(
column(2, includeHTML('help.html'),
br(),
selectInput("var", "Select Variable:",
c("Critical Reading" = "Critical.Reading.Mean",
"Mathematics" = "Mathematics.Mean",
"Writing" = "Writing.Mean",
#"CR + Math" = "MV",
#"CR + Math + Writing" = "MVW",
"Number of Test Takers" = "Number.of.Test.Takers"
))),
column(10, htmlOutput("chart"))),
#tabPanel("Data",
fluidRow(
column(7, offset=3,  br(), DT::dataTableOutput('tbl')))
#)
))
shinyApp(ui = ui, server = server)
